#!/usr/bin/env ruby
ENV['RACK_ENV'] ||= 'development'
# load path
lib_path = File.expand_path('../../lib', __FILE__)
($:.unshift lib_path) unless ($:.include? lib_path)



require 'thor'
require 'hyperdrive'

module Hyperdrive
  class CLI < Thor
    include Thor::Actions

    desc "docs", "Generate docs in markdown based on your resources"
    method_option :input, :aliases => "-i", :type => :string, 
                  :desc => "specify the file or directory to generate docs for"
    method_option :output, :aliases => "-o", :type => :string, 
                  :default => "docs/api.md", :desc => "specify the location of the docs"

    def docs
      input = File.expand_path(options[:input])
      require_resources(input)
      data = generate_docs
      create_file(options[:output], data)
      say "Done!"
    end

    private

    def generate_docs
      docs = ""
      resources.each_value do |resource|
        docs += header(resource.name)
        docs += paragraph(resource.desc)
        docs += header("Endpoint URLS", 2)
        docs += "  - #{resource.endpoint}\n"
        docs += header("Params", 2)
        docs += params(resource.allowed_params)
        docs += header("Filter", 2)
        docs += params(resource.filters)
      end
      docs
    end

    def require_resources(input)
      input = "#{input}/*.rb" unless input =~ /.rb\z/
      Dir.glob(input).each do |file|
        require file
      end
    end

    def resources
      Hyperdrive::DSL::Main.instance.resources
    end

    def header(string, level = 1)
      header = "#" * level
      "\n#{header} #{string}\n\n"
    end

    def paragraph(string)
      "#{string}\n"
    end

    def params(params)
      params_list = ""
      params.each do |k, v|
        params_list += "  - **#{k}** - #{v[:desc]}#{print_required(v[:required])}\n"
      end
      params_list
    end

    def print_required(required_opts)
      default_opts = ["GET", "HEAD", "OPTIONS", "POST", "PUT", "PATCH", "DELETE"]

      if array?(required_opts)
        create_requirements(required_opts)
      elsif required_opts == true
        create_requirements(default_opts)
      else
        string = ""
      end
    end

    def array?(required_opt)
      required_opt.class == Array
    end

    def create_requirements(opts)
      string = "\n   - **Required**: "
      opts.each { |opt| string += " #{opt}, "}
      string
    end
  end
end

Hyperdrive::CLI.start








